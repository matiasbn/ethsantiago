/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../common";
import type { Reentrancy, ReentrancyInterface } from "../Reentrancy";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
      {
        indexed: true,
        internalType: "address",
        name: "sender",
        type: "address",
      },
    ],
    name: "LogDeposit",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
      {
        indexed: true,
        internalType: "address",
        name: "sender",
        type: "address",
      },
    ],
    name: "LogWithdraw",
    type: "event",
  },
  {
    inputs: [],
    name: "deposit",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "userBalances",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "withdrawBalance",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    stateMutability: "payable",
    type: "receive",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b50610504806100206000396000f3fe6080604052600436106100385760003560e01c806326224c64146100445780635fd8c71014610081578063d0e30db0146100985761003f565b3661003f57005b600080fd5b34801561005057600080fd5b5061006b60048036038101906100669190610347565b6100a2565b604051610078919061038d565b60405180910390f35b34801561008d57600080fd5b506100966100ba565b005b6100a061023f565b005b60006020528060005260406000206000915090505481565b60008060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905060003373ffffffffffffffffffffffffffffffffffffffff1682604051610123906103d9565b60006040518083038185875af1925050503d8060008114610160576040519150601f19603f3d011682016040523d82523d6000602084013e610165565b606091505b50509050806101a9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101a09061044b565b60405180910390fd5b60008060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055503373ffffffffffffffffffffffffffffffffffffffff167f08df6cd55b7282d8ab031e61b1f36cc68f27fd8136ca8c97f0a3b7e06222fd3983604051610233919061038d565b60405180910390a25050565b346000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461028d919061049a565b925050819055503373ffffffffffffffffffffffffffffffffffffffff167fe89ad522dd11083142290ca875da39a094bbae4f867e639b44b630d3106c44d3346040516102da919061038d565b60405180910390a2565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610314826102e9565b9050919050565b61032481610309565b811461032f57600080fd5b50565b6000813590506103418161031b565b92915050565b60006020828403121561035d5761035c6102e4565b5b600061036b84828501610332565b91505092915050565b6000819050919050565b61038781610374565b82525050565b60006020820190506103a2600083018461037e565b92915050565b600081905092915050565b50565b60006103c36000836103a8565b91506103ce826103b3565b600082019050919050565b60006103e4826103b6565b9150819050919050565b600082825260208201905092915050565b7f7472616e73666572206661696c65640000000000000000000000000000000000600082015250565b6000610435600f836103ee565b9150610440826103ff565b602082019050919050565b6000602082019050818103600083015261046481610428565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006104a582610374565b91506104b083610374565b92508282019050808211156104c8576104c761046b565b5b9291505056fea264697066735822122045b8549d14c417f58d6c21206258e0be87a434583e3a2e969f3847e9469de9f164736f6c63430008110033";

type ReentrancyConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: ReentrancyConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Reentrancy__factory extends ContractFactory {
  constructor(...args: ReentrancyConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<Reentrancy> {
    return super.deploy(overrides || {}) as Promise<Reentrancy>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): Reentrancy {
    return super.attach(address) as Reentrancy;
  }
  override connect(signer: Signer): Reentrancy__factory {
    return super.connect(signer) as Reentrancy__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ReentrancyInterface {
    return new utils.Interface(_abi) as ReentrancyInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): Reentrancy {
    return new Contract(address, _abi, signerOrProvider) as Reentrancy;
  }
}
