/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../common";
import type { Attacker, AttackerInterface } from "../Attacker";

const _abi = [
  {
    inputs: [
      {
        internalType: "address payable",
        name: "reentrancyContractAddress",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
      {
        indexed: true,
        internalType: "uint256",
        name: "counter",
        type: "uint256",
      },
    ],
    name: "LogReceived",
    type: "event",
  },
  {
    inputs: [],
    name: "counter",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "deposit",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [],
    name: "limit",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "limit_",
        type: "uint256",
      },
    ],
    name: "withdraw",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    stateMutability: "payable",
    type: "receive",
  },
];

const _bytecode =
  "0x60806040526000600155600060025534801561001a57600080fd5b50604051610530380380610530833981810160405281019061003c91906100e5565b806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050610112565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006100b282610087565b9050919050565b6100c2816100a7565b81146100cd57600080fd5b50565b6000815190506100df816100b9565b92915050565b6000602082840312156100fb576100fa610082565b5b6000610109848285016100d0565b91505092915050565b61040f806101216000396000f3fe6080604052600436106100435760003560e01c80632e1a7d4d1461012e57806361bc221a14610157578063a4d66daf14610182578063d0e30db0146101ad57610129565b36610129576001547f1e229629fe7feadb4e0d46eadd6a970d6ffb8388e7b7a0e318d9f27b5c060c123460405161007a91906102e9565b60405180910390a2600254600154101561012757600160008154809291906100a190610333565b919050555060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16635fd8c7106040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561010e57600080fd5b505af1158015610122573d6000803e3d6000fd5b505050505b005b600080fd5b34801561013a57600080fd5b50610155600480360381019061015091906103ac565b6101b7565b005b34801561016357600080fd5b5061016c610241565b60405161017991906102e9565b60405180910390f35b34801561018e57600080fd5b50610197610247565b6040516101a491906102e9565b60405180910390f35b6101b561024d565b005b8060028190555060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16635fd8c7106040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561022657600080fd5b505af115801561023a573d6000803e3d6000fd5b5050505050565b60015481565b60025481565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663d0e30db0346040518263ffffffff1660e01b81526004016000604051808303818588803b1580156102b557600080fd5b505af11580156102c9573d6000803e3d6000fd5b5050505050565b6000819050919050565b6102e3816102d0565b82525050565b60006020820190506102fe60008301846102da565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061033e826102d0565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82036103705761036f610304565b5b600182019050919050565b600080fd5b610389816102d0565b811461039457600080fd5b50565b6000813590506103a681610380565b92915050565b6000602082840312156103c2576103c161037b565b5b60006103d084828501610397565b9150509291505056fea264697066735822122062487ce98ae4c7a8c70abf3ed24135fd83be1fd578b67df4ec8ff80333d6f39c64736f6c63430008110033";

type AttackerConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: AttackerConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Attacker__factory extends ContractFactory {
  constructor(...args: AttackerConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    reentrancyContractAddress: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<Attacker> {
    return super.deploy(
      reentrancyContractAddress,
      overrides || {}
    ) as Promise<Attacker>;
  }
  override getDeployTransaction(
    reentrancyContractAddress: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(
      reentrancyContractAddress,
      overrides || {}
    );
  }
  override attach(address: string): Attacker {
    return super.attach(address) as Attacker;
  }
  override connect(signer: Signer): Attacker__factory {
    return super.connect(signer) as Attacker__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): AttackerInterface {
    return new utils.Interface(_abi) as AttackerInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): Attacker {
    return new Contract(address, _abi, signerOrProvider) as Attacker;
  }
}
