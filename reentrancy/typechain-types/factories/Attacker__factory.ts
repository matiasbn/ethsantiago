/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../common";
import type { Attacker, AttackerInterface } from "../Attacker";

const _abi = [
  {
    stateMutability: "payable",
    type: "receive",
  },
];

const _bytecode =
  "0x608060405273dafea492d9c6733ae3d56b7ed1adb60692c98bc56000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555034801561006457600080fd5b5060bf806100736000396000f3fe60806040523660845760008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16635fd8c7106040518163ffffffff1660e01b8152600401600060405180830381600087803b158015606f57600080fd5b505af11580156082573d6000803e3d6000fd5b005b600080fdfea26469706673582212207bd045dce948efae1eb069184a858452057af9a92abcc1b19600ab1b594f40c664736f6c63430008110033";

type AttackerConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: AttackerConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Attacker__factory extends ContractFactory {
  constructor(...args: AttackerConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<Attacker> {
    return super.deploy(overrides || {}) as Promise<Attacker>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): Attacker {
    return super.attach(address) as Attacker;
  }
  override connect(signer: Signer): Attacker__factory {
    return super.connect(signer) as Attacker__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): AttackerInterface {
    return new utils.Interface(_abi) as AttackerInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): Attacker {
    return new Contract(address, _abi, signerOrProvider) as Attacker;
  }
}
